name: Build and Test of pyprecag on Ubuntu Platform (including documentation)

on: [push,workflow_dispatch]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5

    steps:
    - uses: actions/checkout@v3
    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        python-version: '3.12'
        auto-update-conda: true
        activate-environment: pyprecag_up
    - name: Bash
      shell: bash
      run: |
        echo HEREMNB-5
        which conda
        echo $CONDA
        conda info
        echo "Attempt an init"
        conda init bash
        echo "Re source .basrch to emulate close and restatrt of terminal"
        source ~/.bashrc
        echo "Using $CONDA/bin/conda"
        conda activate pyprecag_up
        $CONDA/bin/conda info
        $CONDA/bin/conda list
        echo "HERERE"

    - name: Install conda packages
      run: |
        # ==========================================================================
        #            Rigermerole to get conda to activate precag_up
        # --------------------------------------------------------------------------
        # Note:
        # This is supposed to be setup automatically and it for the windows platform
        # conda activate requires a conda init first which then demands a shell
        # restart to set all the necessary paths. We emulate the restart by
        # using bash shell and resourcing the .bashrc file
        # -----------------------------------------------
        # conda init with bash shell
        conda init bash
        # Now source .bashrc to emulate the close and restart of the terminal"
        source ~/.bashrc
        # Finally conda activate pyprecag
        conda activate pyprecag_up
        # --------------------------------------------------------------------------
        # End of Rigermerole to get conda to activate precag_up
        # ==========================================================================

        echo "Listing conda info"
        conda info
        echo "Running conda install"
        conda install geopandas                              -c conda-forge -y
        conda install fiona six chardet unidecode scipy pint -c conda-forge -y
        conda install gdal                                   -c conda-forge -y


    - name: Install local pyprecag module
      run: |
        # ==========================================================================
        #            Rigermerole to get conda to activate precag_up
        # --------------------------------------------------------------------------
        # Note:
        # This is supposed to be setup automatically and it for the windows platform
        # conda activate requires a conda init first which then demands a shell
        # restart to set all the necessary paths. We emulate the restart by
        # using bash shell and resourcing the .bashrc file
        # -----------------------------------------------
        # conda init with bash shell
        conda init bash
        # Now source .bashrc to emulate the close and restart of the terminal"
        source ~/.bashrc
        # Finally conda activate pyprecag
        conda activate pyprecag_up
        # --------------------------------------------------------------------------
        # End of Rigermerole to get conda to activate precag_up
        # ==========================================================================
        conda info
        conda list
        conda install rasterio
        conda list
        echo "Make some pip and python tests"
        which pip
        which python
        echo "Test 1"
        which python
        python -c 'import rasterio'
        echo 'Test 2'
        python -c 'import osgeo'
        echo "About to call pip install ."
        pip install .
    
    - name: Static Analysis of Python Code for Syntax Errors or Undefined names
      run: |    
        conda install flake8 -y
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Unit Tests (Ubuntu specific)
      run: |
        python -m unittest pyprecag/tests/test_bandops.py
        python -m unittest pyprecag/tests/test_config.py        
        python -m unittest pyprecag/tests/test_convert.py
        python -m unittest pyprecag/tests/test_crs.py
        python -m unittest pyprecag/tests/test_describe.py
        python -m unittest pyprecag/tests/test_kriging_ops.py
        python -m unittest pyprecag/tests/test_rasterops.py
        echo "skipping: python -m unittest pyprecag/tests/test_end2end.py"
        echo "skipping: python -m unittest pyprecag/tests/test_processing.py"
        echo "skipping: python -m unittest pyprecag/tests/test_vector_ops.py"
    
    - name: Build latex help documents
      run: |
        echo "======================================"
        echo "       Install sphinx tools  "
        echo "======================================"
        conda install sphinx
        conda install sphinx_rtd_theme
        
        echo "======================================"
        echo "Use sphinx-build to create latex files"
        echo "======================================"
        sphinx-build -M latex ./docs ./pyprecag_docs 
        echo "Latex Directory:"
        ls ./pyprecag_docs/latex

    - name: Install latexmak and related packages to create pdf documents
      run: |        
        echo "======================================"
        echo "  Install latexmk and related pkgs"
        echo "======================================"
        sudo apt-get update
        sudo apt-get -y install latexmk
        sudo apt-get -y install texlive-fonts-recommended texlive-latex-recommended texlive-latex-extra
    - name: Use latmak to create pdf document from latex`
      run: |        
        cd ./pyprecag_docs/latex/; latexmk -pdf -dvi- -ps- -f pyprecag.tex
        echo "======================================"
        echo "  Finished build of PDF from Latex"
        echo "======================================"
        echo "Latex Directory:"
        echo "Here:"
        ls
        
    - name: Build html documents
      run: |
        echo "======================================"
        echo "Use sphinx-build to create html files"
        echo "======================================"
        sphinx-build -M html ./docs ./pyprecag_docs 
        echo "Html Directory:"
        ls ./pyprecag_docs/html
                    
    - name: Upload Help pdf document as an Artifact
      uses: actions/upload-artifact@v4
      with:
        name: pyprecag_help.pdf
        path: ./pyprecag_docs/latex/pyprecag.pdf
        
    - name: Upload Help html documents folder as an Artifact
      uses: actions/upload-artifact@v4
      with:
        name: pyprecag_help_html
        path: ./pyprecag_docs/html
    
